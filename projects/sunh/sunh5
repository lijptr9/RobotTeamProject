import tkinter
from tkinter import ttk
import math
import mqtt_remote_method_calls as com

class Drawer(object):
    def __init__(self, canvas):
        self.canvas = canvas
        self.start_x = 0
        self.start_y = 0
        self.distance_list = []
        self.angle_list = []
        self.point_list = []

    def draw_circle(self, color, x, y):
        self.canvas.create_oval(x - 2, y - 2, x + 2, y + 2, fill=color,
                                width=1)

    def set_point(self, x, y):
        self.start_x = x
        self.start_y = y

    def draw_line(self, color, x1, y1):
        self.canvas.create_line(self.start_x, self.start_y, x1, y1, fill=color)



def main():
    mqtt_client = com.MqttClient()
    mqtt_client.connect_to_ev3()



    window2 = tkinter.Tk()
    window2.title='EV3 Final Project'
    main_frame2 = ttk.Frame(window2, padding=5)
    main_frame2.grid()

    canvas=tkinter.Canvas(main_frame2, background="white", width=500, height=400)
    canvas.grid(columnspan=4)
    canvas.grid(rowspan=4)

    # filename = PhotoImage(file="new image - qva1l.jpg")
    # image = canvas.create_image(50, 50, anchor=NE, image=filename)
    canvas.create_text(250, 150, fill="darkblue", font="Times 20 italic bold",
                            text="CSSE120 Final Project")
    canvas.create_text(255, 180, fill="darkblue", font="Times 20 italic bold",
                       text="Follow the Line")

    continue_button = ttk.Button(main_frame2, text="Continue")
    continue_button.grid(row=4, column=3)
    continue_button['command']=lambda: next_window()

    quit_button = ttk.Button(main_frame2, text="Quit")
    quit_button.grid(row=4,column=1)
    quit_button['command']=lambda: end(mqtt_client)
    #
    #
    # # create a tkinter window
    # window = tkinter.Tk()
    # window.title = "EV3 controller"
    #
    # main_frame = ttk.Frame(window, padding=5)
    # main_frame.grid()
    #
    # # set up the instruction and make a tkinter.Canvas
    # instructions = "Click the window to make path for robot"
    # label = ttk.Label(main_frame, text=instructions)
    # label.grid(columnspan=2)
    # canvas = tkinter.Canvas(main_frame, background="lightgray", width=900,
    #                         height=600)
    # canvas.grid(columnspan=2)
    # drawer = Drawer(canvas)
    #
    # # make call back to add_path function
    # canvas.bind("<ButtonPress-1>", lambda event: add_path(event, drawer))
    #
    # # close the canvas and the mqtt
    # quit_button = ttk.Button(main_frame, text="Quit")
    # quit_button.grid(row=3, column=0)
    # quit_button["command"] = lambda: end(mqtt_client)
    #
    # # start the path we have
    # start_button = ttk.Button(main_frame, text="Start")
    # start_button.grid(row=3, column=1)
    # start_button["command"] = lambda: start_path(drawer, mqtt_client)

    # window().mainloop()
    window2.mainloop()

def next_window():
    # canvas.
    Window2()

 # def Window1():
 #     window2 = tkinter.Tk()
 #     window2.title = 'EV3 Final Project'
 #     main_frame2 = ttk.Frame(window2, padding=5)
 #     main_frame2.grid()
 #
 #     canvas = tkinter.Canvas(main_frame2, background="white", width=500, height=400)
 #     canvas.grid(columnspan=4)
 #     canvas.grid(rowspan=4)
 #
 #     # filename = PhotoImage(file="new image - qva1l.jpg")
 #     # image = canvas.create_image(50, 50, anchor=NE, image=filename)
 #     canvas.create_text(250, 150, fill="darkblue", font="Times 20 italic bold",
 #                        text="CSSE120 Final Project")
 #     canvas.create_text(255, 180, fill="darkblue", font="Times 20 italic bold",
 #                        text="Follow the Line")
 #
 #     continue_button = ttk.Button(main_frame2, text="Continue")
 #     continue_button.grid(row=4, column=3)
 #     # continue_button['command'] = lambda: next_window()

def Window2():
    mqtt_client = com.MqttClient()
    mqtt_client.connect_to_ev3()
    window = tkinter.Tk()
    window.title = "EV3 controller"

    main_frame = ttk.Frame(window, padding=5)
    main_frame.grid()

    instructions = "Click the window to make path for robot"
    label = ttk.Label(main_frame, text=instructions)
    label.grid(columnspan=2)
    canvas = tkinter.Canvas(main_frame, background="lightgray", width=900,
                            height=600)
    canvas.grid(columnspan=2)
    drawer = Drawer(canvas)

    canvas.bind("<ButtonPress-1>", lambda event: add_path(event, drawer))

    quit_button = ttk.Button(main_frame, text="Quit")
    quit_button.grid(row=3, column=0)
    quit_button["command"] = lambda: end(mqtt_client)

    start_button = ttk.Button(main_frame, text="Start")
    start_button.grid(row=3, column=1)
    start_button["command"] = lambda: start_path(drawer, mqtt_client)


def add_path(event, drawer):
    print(" Click location at ({},{})".format(event.x, event.y))
    my_color = "blue"
    drawer.draw_circle(my_color, event.x, event.y)
    drawer.point_list.append(event)

    if drawer.start_x != 0:
        drawer.draw_line(my_color, event.x, event.y)
        angle = math.atan2((event.x - drawer.start_x),
                           (drawer.start_y - event.y))

        angle_degree = math.degrees(angle)

        distance = math.sqrt(
            (event.x - drawer.start_x) ** 2 + (event.y - drawer.start_y) ** 2)
        drawer.distance_list.append(distance)
        drawer.angle_list.append(angle_degree)
    drawer.point_list.append(event)
    drawer.set_point(event.x, event.y)


def start_path(drawer, mqtt_client):
    angle_new_list = [drawer.angle_list[0]]
    for k in range(1, len(drawer.angle_list)):
        new_add = drawer.angle_list[k] - drawer.angle_list[k - 1]
        angle_new_list.append(new_add)
    # for k in range(len(angle_new_list)):
    #     if angle_new_list[k] < -180:
    #         angle_new_list[k] = angle_new_list[k] + 360

    for k in range(len(angle_new_list)):
        if angle_new_list[k] > 180:
            angle_new_list[k] = 360 - angle_new_list[k]

    for k in range(0, len(angle_new_list)):
        mqtt_client.send_message("turn_degrees", [angle_new_list[k], 900])
        drawer.distance_list[k] *= 0.1
        mqtt_client.send_message("drive_inches", [drawer.distance_list[k],900])
        print(angle_new_list[k], drawer.distance_list[k])





def end(mqtt_client):
    if mqtt_client:
        mqtt_client.close()
    exit()


main()